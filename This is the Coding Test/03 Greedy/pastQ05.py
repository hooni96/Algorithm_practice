'''
★기출 05. 볼링공 고르기★
A, B 두 사람은 서로 무게가 다른 볼링공을 고르려고 한다.
볼링골은 총 n개가 있으며, 볼링공마다 무게가 적혀있고
공의 번호는 1번부터 순서대로 부여됩니다.
또한 같은 무게의 공이 여러 개 있을 수 있지만, 서로 다른 공으로 간주합니다.
볼링공의 무게는 1부터 M까지의 자연수 형태로 존재합니다.
n개의 공의 무게가 각각 주어질 때,
두 사람이 볼링공을 고르는 경우의 수를 구하는 프로그램을 작성하시오.

그냥 조합 라이브러리 불러와서 풀면 아주 쉽게 구할 수 있을 듯!

해설에서는 먼저 무게마다 볼링공이 몇 개 있는지를 계산하라고 한다.
A가 특정 무게의 볼링공을 선택했을 때, 이어서 B가 볼링공을 선택하는 경우를
차례대로 계산하여 문제를 풀 수 있다. A를 기준으로 무게가 늦은 볼링공부터
무게가 높은 볼링공까지 순서대로 하나씩 확인을 한다고 했을 때 다음과 같다.
단계가 진행됨에 따라 B가 선택하는 경우의 수는 줄어드는데, 이미 계산했던 경우(조합)은
제외하기 때문이다. 또한 볼링공의 무게가 1부터 10까지만 존재할 수 있다고 명시되어 있다.
따라서 하나의 리스트 변수를 선언해서, 각 무게별로 볼링공이 몇 개가 존재하는 지 기록할 수 있다.

지금은 하나도 이해가 안되서 다시 풀어봐야 될 것 같다.
'''
# A05
n, m = map(int, input().split())
data = list(map(int, input().split))

arr = [0] * 11 # 1부터 10까지의 무게를 담을 수 있는 리스트

for x in data: # 각 무게에 해당하는 볼링공의 개수 카운트
  arr[x] += 1

result = 0
for i in range(1, m + 1): # 1부터 m까지의 각 무게에 대하여 처리
  n -= arr[i] # 무게가 i인 볼링공의 개수(A가 선택할 수 있는 개수) 제외
  result += arr[i] * n # B가 선택하는 경우의 수와 곱하기

print(result)

'''
근데 내가 푼대로 풀면 결과값이 계속다름!!

# 내가 푼 코드
from itertools import combinations

n, m = map(int, input().split())
k = list(map(int, input().split()))

ball = list(combinations(k, 2))
result = 0

for i in ball:
  result += 1

print(result)
'''