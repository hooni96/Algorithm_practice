'''
예제 4-1 상하좌우
첫 예시 문제 혼자 풀어보려고 했으나.. 이 문제는 해석보고
하고 그 다음부터 직접 풀어보는게 시간 절약이 될 것이라 생각한다.

이 문제를 요구사항대로 구현하면 연산 횟수는 이동 횟수에 비례하게 된다.
이동횟수가 n번인 경우 시간 복잡도는 O(n)이다. 따라서 이 문제의 시간 복잡도는 매우 넉넉하다.
일련의 명령에 따러서 개체를 차례대로 이동시킨다는 점에서 시뮬레이션 유형으로 분류되며
구현이 중요한 대표적인 문제 유형이다.

코테나 알고리즘 대회에서 가장 난이도가 낮은 1~2번 문제는 대부분 그리디나 구현 문제이다.
'''
# 4-1
n = int(input())
x, y = 1, 1
plans = input().split()

# L, R, U, D에 따른 이동 방향
dx = [0 ,0 ,-1 ,1]
dy = [-1, 1, 0, 0]
move_types = ['L', 'R', 'U', 'D']

nx = 0
ny = 0

# 이동 계획을 하나씩 확인
for plan in plans:
  # 이동 후 좌표 구하기
  for i in range(len(move_types)):
    if plan == move_types[i]:
      nx = x + dx[i]
      ny = y + dy[i]
    # 공간을 벗어나는 경우 무시
    if nx < 1 or ny < 1 or nx > n or ny > n:
      continue
    # 이동 수행
    x, y = nx, ny

print(x ,y)